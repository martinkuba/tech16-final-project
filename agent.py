from llama_index.core.tools import FunctionTool
from llama_index.llms.openai import OpenAI
from llama_index.agent.openai import OpenAIAgent
import os

VAULT_PATH = "test_data/obsidian"

# Initialize LLM for the Agent
llm = OpenAI(model="gpt-4-turbo", temperature=0.4)

# Define a tool to read a note
def read_note(file_name: str) -> str:
    """Reads the content of a markdown note."""
    file_path = os.path.join(VAULT_PATH, file_name)
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as file:
            return file.read()
    return ""

# Define a tool to write to a note
def write_note(file_name: str, updated_content: str):
    """Writes updated content to a markdown note."""
    file_path = os.path.join(VAULT_PATH, file_name)
    with open(file_path, "w", encoding="utf-8") as file:
        file.write(updated_content)
    print(f"âœ… AI Updated: {file_name}")

# Define the Agent with function tools
agent = OpenAIAgent.from_tools(
    tools=[
        FunctionTool.from_defaults(fn=read_note),
        FunctionTool.from_defaults(fn=write_note),
    ],
    llm=llm,
    system_prompt="""
    You are an autonomous note assistant.
    - Your task is to analyze markdown notes and improve them.
    - Read a note using `read_note(file_name)`.
    - If needed, rewrite the note for clarity, organization, or completeness.
    - Save improvements using `write_note(file_name, updated_content)`.
    - Only modify a note if an improvement is necessary.
    - When you update the file, do not write in the frontmatter section that starts and ends with "---" at the top of the file.
    - When you update the file, I want you to keep the original content and append your content after it.

Here is an example of what the contents of the file should look like:

---
date: 2025-02-22
alias: some alias
other-field: some other value
---

Original content: This is the original content of the file.

# AI-generated content
This is the section that contains the content generated by the LLM.
    """
)

# Scan all markdown notes and let the agent decide actions
# for note_file in os.listdir(VAULT_PATH):
    # if note_file.endswith(".md"):
      # print(note_file)
        # response = agent.chat(f"Analyze and improve the note: {note_file}")
        # print(f"ðŸ¤– AI Decision for {note_file}: {response}")

response = agent.chat(f"Analyze and improve the note: Embeddings.md")
